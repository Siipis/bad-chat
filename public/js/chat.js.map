{"version":3,"sources":["alert.js","cookies.js","app.js","input/tabhelper.js","ajax.js","audio.js","data.js","notifications.js","selectors.js","settings.js","styling.js","tabhelper.js","chat.js","input.js","menu.js","messages.js","sounds.js"],"names":[],"mappingsvJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjhSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACplMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChjnxOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClEA;AACA;AACA","file":"chat.js","sourcesContent":["$(document).ready(function() {\r\n    var alertTimeout = window.setTimeout(function() {\r\n        $(\".alert.fade-out\").fadeOut('slow');\r\n    }, 10000);\r\n});","/*!\n * JavaScript Cookie v2.1.1\n * https://github.com/js-cookie/js-cookie\n *\n * Copyright 2006, 2015 Klaus Hartl & Fagner Brack\n * Released under the MIT license\n */\n;(function (factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine(factory);\n\t} else if (typeof exports === 'object') {\n\t\tmodule.exports = factory();\n\t} else {\n\t\tvar OldCookies = window.Cookies;\n\t\tvar api = window.Cookies = factory();\n\t\tapi.noConflict = function () {\n\t\t\twindow.Cookies = OldCookies;\n\t\t\treturn api;\n\t\t};\n\t}\n}(function () {\n\tfunction extend () {\n\t\tvar i = 0;\n\t\tvar result = {};\n\t\tfor (; i < arguments.length; i++) {\n\t\t\tvar attributes = arguments[ i ];\n\t\t\tfor (var key in attributes) {\n\t\t\t\tresult[key] = attributes[key];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction init (converter) {\n\t\tfunction api (key, value, attributes) {\n\t\t\tvar result;\n\t\t\tif (typeof document === 'undefined') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Write\n\n\t\t\tif (arguments.length > 1) {\n\t\t\t\tattributes = extend({\n\t\t\t\t\tpath: '/'\n\t\t\t\t}, api.defaults, attributes);\n\n\t\t\t\tif (typeof attributes.expires === 'number') {\n\t\t\t\t\tvar expires = new Date();\n\t\t\t\t\texpires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 864e+5);\n\t\t\t\t\tattributes.expires = expires;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tresult = JSON.stringify(value);\n\t\t\t\t\tif (/^[\\{\\[]/.test(result)) {\n\t\t\t\t\t\tvalue = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\n\t\t\t\tif (!converter.write) {\n\t\t\t\t\tvalue = encodeURIComponent(String(value))\n\t\t\t\t\t\t.replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = converter.write(value, key);\n\t\t\t\t}\n\n\t\t\t\tkey = encodeURIComponent(String(key));\n\t\t\t\tkey = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);\n\t\t\t\tkey = key.replace(/[\\(\\)]/g, escape);\n\n\t\t\t\treturn (document.cookie = [\n\t\t\t\t\tkey, '=', value,\n\t\t\t\t\tattributes.expires && '; expires=' + attributes.expires.toUTCString(), // use expires attribute, max-age is not supported by IE\n\t\t\t\t\tattributes.path    && '; path=' + attributes.path,\n\t\t\t\t\tattributes.domain  && '; domain=' + attributes.domain,\n\t\t\t\t\tattributes.secure ? '; secure' : ''\n\t\t\t\t].join(''));\n\t\t\t}\n\n\t\t\t// Read\n\n\t\t\tif (!key) {\n\t\t\t\tresult = {};\n\t\t\t}\n\n\t\t\t// To prevent the for loop in the first place assign an empty array\n\t\t\t// in case there are no cookies at all. Also prevents odd result when\n\t\t\t// calling \"get()\"\n\t\t\tvar cookies = document.cookie ? document.cookie.split('; ') : [];\n\t\t\tvar rdecode = /(%[0-9A-Z]{2})+/g;\n\t\t\tvar i = 0;\n\n\t\t\tfor (; i < cookies.length; i++) {\n\t\t\t\tvar parts = cookies[i].split('=');\n\t\t\t\tvar name = parts[0].replace(rdecode, decodeURIComponent);\n\t\t\t\tvar cookie = parts.slice(1).join('=');\n\n\t\t\t\tif (cookie.charAt(0) === '\"') {\n\t\t\t\t\tcookie = cookie.slice(1, -1);\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tcookie = converter.read ?\n\t\t\t\t\t\tconverter.read(cookie, name) : converter(cookie, name) ||\n\t\t\t\t\t\tcookie.replace(rdecode, decodeURIComponent);\n\n\t\t\t\t\tif (this.json) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tcookie = JSON.parse(cookie);\n\t\t\t\t\t\t} catch (e) {}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key === name) {\n\t\t\t\t\t\tresult = cookie;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!key) {\n\t\t\t\t\t\tresult[name] = cookie;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t}\n\n\t\tapi.set = api;\n\t\tapi.get = function (key) {\n\t\t\treturn api(key);\n\t\t};\n\t\tapi.getJSON = function () {\n\t\t\treturn api.apply({\n\t\t\t\tjson: true\n\t\t\t}, [].slice.call(arguments));\n\t\t};\n\t\tapi.defaults = {};\n\n\t\tapi.remove = function (key, attributes) {\n\t\t\tapi(key, '', extend(attributes, {\n\t\t\t\texpires: -1\n\t\t\t}));\n\t\t};\n\n\t\tapi.withConverter = init;\n\n\t\treturn api;\n\t}\n\n\treturn init(function () {});\n}));\n","/**\r\n * Angular JS\r\n *\r\n * @type {IModule}\r\n */\r\n\r\nvar app = angular.module('chat', ['ngSanitize']);\r\n\r\napp.config(['$httpProvider', function ($httpProvider) {\r\n    $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';\r\n}]);","app.factory('TabHelper', function (Data) {\r\n    var obj = {};\r\n\r\n    var isActive = false;\r\n    var origInput = null;\r\n    var tabIndex = -1;\r\n    var tabPattern = null;\r\n    var tabRemnant = null;\r\n    var tabList = [];\r\n\r\n    function getPattern(input) {\r\n        var split = input.split(' ');\r\n\r\n        return split[split.length - 1];\r\n    }\r\n\r\n    function getRemnant(input, pattern) {\r\n        return input.substr(0, input.length - pattern.length);\r\n    }\r\n\r\n    obj.init = function(input) {\r\n        if (isActive) {\r\n            return;\r\n        }\r\n\r\n        origInput = input;\r\n        tabIndex = -1;\r\n\r\n        tabPattern = getPattern(input);\r\n\r\n        tabList = obj.userList();\r\n        tabRemnant = getRemnant(input, tabPattern);\r\n\r\n        obj.setActive(true);\r\n    };\r\n\r\n    obj.next = function() {\r\n        if (!isActive) {\r\n            return;\r\n        }\r\n\r\n        if (tabList.length == 0) {\r\n            return origInput;\r\n        }\r\n\r\n        tabIndex++;\r\n\r\n        if (tabIndex == tabList.length) {\r\n            tabIndex = 0;\r\n        }\r\n\r\n        return tabRemnant + tabList[tabIndex];\r\n    };\r\n\r\n    obj.setActive = function(active) {\r\n        isActive = active;\r\n    };\r\n\r\n    obj.tabList = function() {\r\n        return tabList;\r\n    };\r\n\r\n    obj.userList = function() {\r\n        var array = [];\r\n\r\n        if (tabPattern == null) {\r\n            return array;\r\n        }\r\n\r\n        var pattern = new RegExp('^' + tabPattern, 'i');\r\n\r\n        $.each(Data.userList(), function(i, user) {\r\n            if (tabPattern.length == 0 || pattern.test(user.name)) {\r\n                array.push(user.name);\r\n            }\r\n        });\r\n\r\n        return array;\r\n    };\r\n\r\n    return obj;\r\n});","app.factory('Ajax', function ($rootScope, $q, $interval, $http, Data, Settings) {\r\n    var obj = {};\r\n\r\n    var refreshInterval = null;\r\n    var refreshPromise = null;\r\n    var cancelRefresh = null;\r\n\r\n    var notificationInterval = null;\r\n    var notificationPromise = null;\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Helpers\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Helper methods\r\n     |\r\n     */\r\n\r\n    /**\r\n     * Handles HTTP responses\r\n     *\r\n     * @param {int} response\r\n     */\r\n    function handleError(response) {\r\n        obj.stopAjax();\r\n\r\n        if (response.status == 401) {\r\n            $http.get('/chat/logout').then(function (response) {\r\n                $rootScope.$broadcast('reload');\r\n            }, function (response) {\r\n                $rootScope.$broadcast('reload');\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        if (response.status == 307) {\r\n            $rootScope.$broadcast('reload');\r\n\r\n            return;\r\n        }\r\n\r\n        if (response.status == 409) {\r\n            $rootScope.$broadcast('error', 'Kicked', 'You have been kicked from the channel.');\r\n\r\n            return;\r\n        }\r\n\r\n        if (response.status == 500) {\r\n            $rootScope.$broadcast('error', 'Server error', 'A server error occurred!');\r\n\r\n            return;\r\n        }\r\n\r\n        $rootScope.$broadcast('error', 'Unknown error', 'An unknown error occurred. Try reloading the page.');\r\n    }\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Intervals\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Interval functions\r\n     |\r\n     */\r\n\r\n    obj.startAjax = function () {\r\n        var promise = obj.refresh();\r\n        obj.notifications();\r\n\r\n        promise.resolve();\r\n    };\r\n\r\n    obj.startRefresh = function () {\r\n        obj.stopRefresh();\r\n\r\n        refreshPromise = $interval(function () {\r\n            obj.refresh();\r\n        }, refreshInterval);\r\n    };\r\n\r\n    obj.startNotifications = function () {\r\n        obj.stopNotifications();\r\n\r\n        notificationPromise = $interval(function () {\r\n            obj.notifications();\r\n        }, notificationInterval);\r\n    };\r\n\r\n    obj.stopAjax = function () {\r\n        obj.stopRefresh();\r\n        obj.stopNotifications();\r\n    };\r\n\r\n    obj.stopRefresh = function () {\r\n        $interval.cancel(refreshPromise);\r\n    };\r\n\r\n    obj.stopNotifications = function () {\r\n        $interval.cancel(notificationPromise);\r\n    };\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Accessors\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Setters and getters\r\n     |\r\n     */\r\n\r\n    obj.refreshInterval = function (newInterval) {\r\n        if (newInterval !== undefined) {\r\n            refreshInterval = newInterval;\r\n        }\r\n\r\n        return refreshInterval;\r\n    };\r\n\r\n    obj.notificationInterval = function (newInterval) {\r\n        if (newInterval !== undefined) {\r\n            notificationInterval = newInterval;\r\n        }\r\n\r\n        return notificationInterval;\r\n    };\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Init\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Initialization\r\n     |\r\n     */\r\n\r\n    obj.start = function () {\r\n        obj.login();\r\n    };\r\n\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | AJAX\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Various AJAX methods\r\n     |\r\n     */\r\n\r\n    /**\r\n     * Sends a login request\r\n     */\r\n    obj.login = function () {\r\n        $http.post('/chat/login').then(function (response) {\r\n            Data.storeLoginResponse(response.data);\r\n\r\n            var config = response.data.config.interval;\r\n\r\n            // Store the AJAX config\r\n            obj.refreshInterval(config.messages);\r\n            obj.notificationInterval(config.notifications);\r\n\r\n            // Init the application\r\n            $rootScope.$broadcast('loggedIn');\r\n            $rootScope.$broadcast('setInputLength', response.data.config.maxLength);\r\n\r\n            obj.startAjax();\r\n\r\n        }, function (response) {\r\n            handleError(response);\r\n        });\r\n    };\r\n\r\n    /**\r\n     * Updates the chat\r\n     */\r\n    obj.refresh = function () {\r\n        var httpTimeout = $q.defer();\r\n\r\n        obj.abortRefresh();\r\n\r\n        var request = $http.post('/chat/update', {\r\n            channel: Data.channel(),\r\n            channels: Data.channelList(),\r\n            async: false,\r\n            timeout: httpTimeout.promise\r\n        });\r\n\r\n        var handler = request.then(function (response) {\r\n            if (response.status != 200) {\r\n                handleError(response);\r\n\r\n                return;\r\n            }\r\n\r\n            Data.storeRefreshResponse(response.data);\r\n\r\n            obj.startRefresh();\r\n\r\n            cancelRefresh = null;\r\n        }, function (response) {\r\n            handleError(response);\r\n\r\n            cancelRefresh = null;\r\n        });\r\n\r\n        return httpTimeout;\r\n    };\r\n\r\n    obj.abortRefresh = function () {\r\n        obj.stopRefresh();\r\n\r\n        if (refreshPromise && refreshPromise._httpTimeout && refreshPromise._httpTimeout.resolve) {\r\n            console.log('Cancel promise: ', refreshPromise);\r\n\r\n            refreshPromise._httpTimeout.resolve();\r\n        }\r\n    };\r\n\r\n    obj.notifications = function () {\r\n        obj.stopNotifications();\r\n\r\n        $http.post('/chat/notifications').then(function (response) {\r\n            if (response.status != 200) {\r\n                handleError(response);\r\n            }\r\n\r\n            Data.notifications(response.data);\r\n\r\n            obj.startNotifications();\r\n        });\r\n    };\r\n\r\n    obj.abortNotifications = function () {\r\n        obj.stopNotifications();\r\n    };\r\n\r\n    /**\r\n     * Sends the user input to the server\r\n     *\r\n     * @param {string} message\r\n     */\r\n    obj.send = function (message) {\r\n        if (typeof message !== 'string') {\r\n            throw new Error('Message must be a string.');\r\n        }\r\n\r\n        obj.stopRefresh();\r\n\r\n        $http.post('/chat/send', {\r\n            channel: Data.channel(),\r\n            message: message,\r\n            color: Settings.get('color')\r\n        }).then(function (response) {\r\n            if (response.status != 200) {\r\n                handleError(response);\r\n\r\n                return;\r\n            }\r\n\r\n            if (response.data.channel !== undefined) {\r\n                Data.channel(response.data.channel);\r\n            }\r\n\r\n            obj.refresh();\r\n\r\n            $rootScope.$broadcast('sent');\r\n        }, function (response) {\r\n            handleError(response);\r\n        });\r\n    };\r\n\r\n    obj.remove = function (row) {\r\n        $http.post('/chat/delete', {\r\n            channel: Data.channel(),\r\n            id: row.id\r\n        }).then(function (response) {\r\n            if (response.status != 200) {\r\n                handleError(response);\r\n            }\r\n        }, function (response) {\r\n            handleError(response);\r\n        });\r\n    };\r\n\r\n    return obj;\r\n});","app.factory('Audio', function ($rootScope, Settings) {\r\n    var audio = false;\r\n    var useAudio = false;\r\n\r\n    $(window).focus(function () {\r\n        useAudio = false;\r\n    }).blur(function () {\r\n        useAudio = true;\r\n    });\r\n\r\n    function initAudio() {\r\n        if (!audio) {\r\n            audio = $('audio')[0];\r\n        }\r\n    }\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Init\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Init the object\r\n     |\r\n     */\r\n\r\n    var obj = {};\r\n\r\n    obj.playDing = function () {\r\n        initAudio();\r\n\r\n        if (useAudio && Settings.get('sound')) {\r\n            audio.play();\r\n        }\r\n    };\r\n\r\n    return obj;\r\n});","app.factory('Data', function ($rootScope) {\r\n    var config = {};\r\n    var notifications = 0;\r\n    var user = {};\r\n    var channel = {};\r\n    var channelList = {};\r\n    var topicList = {};\r\n    var userList = {};\r\n    var rowList = {};\r\n\r\n    var obj = {};\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Accessors\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Getters and setters\r\n     |\r\n     */\r\n\r\n    obj.config = function (newConfig) {\r\n        if (newConfig !== undefined) {\r\n            config = newConfig;\r\n        }\r\n\r\n        return config;\r\n    };\r\n\r\n    obj.notifications = function (newNotifications) {\r\n        if (newNotifications !== undefined) {\r\n            if (!angular.isNumber(newNotifications)) {\r\n                throw \"Notification count must be an integer.\";\r\n            }\r\n\r\n            notifications = newNotifications;\r\n        }\r\n\r\n        return notifications;\r\n    };\r\n\r\n    obj.user = function (newUser) {\r\n        if (newUser !== undefined) {\r\n            user = newUser;\r\n        }\r\n\r\n        return user;\r\n    };\r\n\r\n    obj.channel = function (newChannel) {\r\n        if (newChannel !== undefined) {\r\n            channel = newChannel;\r\n        }\r\n\r\n        return channel;\r\n    };\r\n\r\n    obj.channelName = function () {\r\n        if (channel === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return channel.name;\r\n    };\r\n\r\n    obj.channelTopic = function () {\r\n        if (channel === undefined) {\r\n            return null;\r\n        }\r\n\r\n        return channel.topic;\r\n    };\r\n\r\n    obj.channelList = function (newChannelList) {\r\n        if (newChannelList !== undefined) {\r\n            channelList = newChannelList;\r\n        }\r\n\r\n        return channelList;\r\n    };\r\n\r\n    obj.topic = function (channelKey, newTopic) {\r\n        if (channelKey === undefined) {\r\n            channelKey = obj.channelName();\r\n        }\r\n\r\n        if (newTopic !== undefined) {\r\n            topicList[channelKey] = newTopic;\r\n        }\r\n\r\n        var topic = topicList[channelKey];\r\n\r\n        return topic === undefined ? null : topic;\r\n    };\r\n\r\n    obj.userList = function (newUserList) {\r\n        if (newUserList !== undefined) {\r\n            userList = newUserList;\r\n        }\r\n\r\n        return userList;\r\n    };\r\n\r\n    obj.rowList = function (channelKey) {\r\n        if (channelKey === undefined) {\r\n            channelKey = obj.channelName();\r\n        }\r\n\r\n        return rowList[channelKey];\r\n    };\r\n\r\n    obj.clearRows = function(channelKey) {\r\n        if (channelKey === undefined) {\r\n            channelKey = obj.channelName();\r\n        }\r\n\r\n        rowList[channelKey] = [];\r\n    };\r\n\r\n    obj.addRow = function (channelKey, row) {\r\n        var rows = rowList[channelKey] === undefined ? [] : rowList[channelKey];\r\n        var maxMessages = config.settings.maxMessages;\r\n\r\n        rows.push(row);\r\n\r\n        if (rows.length > maxMessages) {\r\n            rows = rows.slice(-maxMessages);\r\n        }\r\n\r\n        rowList[channelKey] = rows;\r\n    };\r\n\r\n    obj.addRows = function (channelKey, rows) {\r\n        var soundWasPlayed = false;\r\n\r\n        $.each(rows, function (i, row) {\r\n            // Handle special rows\r\n            if (row.type == 'system') {\r\n                switch (row.name) {\r\n                    case 'delete_row':\r\n                        var index = -1;\r\n\r\n                        $.each(rowList[channelKey], function(i, item) {\r\n                            if (item.id == row.message.id) {\r\n                                index = i;\r\n                                return true;\r\n                            }\r\n                        });\r\n\r\n                        if (index != -1) {\r\n                            rowList[channelKey].splice(index, 1);\r\n                        }\r\n\r\n                        return;\r\n                }\r\n            }\r\n\r\n            // Play notification\r\n            if (!soundWasPlayed && !row.isOwnMessage) {\r\n                $rootScope.$broadcast('newMessages');\r\n            }\r\n\r\n            // Add the row\r\n            obj.addRow(channelKey, row);\r\n        });\r\n    };\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Ajax handlers\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Store the raw Ajax output\r\n     |\r\n     */\r\n\r\n    obj.storeLoginResponse = function (data) {\r\n        obj.user(data.user);\r\n        obj.channel(data.channel);\r\n        obj.topic(data.channel.name, data.channel.topic);\r\n\r\n        obj.config(data.config);\r\n    };\r\n\r\n    obj.storeRefreshResponse = function (data) {\r\n        obj.channel(data.channel);\r\n        obj.topic(data.channel.name, data.channel.topic);\r\n        obj.channelList(data.channels);\r\n        obj.userList(data.users);\r\n\r\n        obj.addRows(data.channel.name, data.rows);\r\n    };\r\n\r\n    return obj;\r\n});","app.factory('Notifications', function() {\r\n    var obj = {};\r\n\r\n    obj.notifications = 0;\r\n\r\n    obj.set = function(value) {\r\n        obj.notifications = value;\r\n    };\r\n\r\n    obj.get = function() {\r\n        return obj.notifications;\r\n    };\r\n\r\n    obj.exists = function() {\r\n        return obj.notifications > 0;\r\n    };\r\n\r\n    return obj;\r\n});","app.factory('Selectors', function() {\r\n    var obj = {};\r\n\r\n    obj.fadeIn = $('.fade-in');\r\n    obj.chat = $('#chat-container');\r\n    obj.overlay = $('#overlay');\r\n    obj.commands = $('#commands-overlay');\r\n    obj.chatWindowSelector = '#chat-window';\r\n    obj.chatWindow = $(obj.chatWindowSelector);\r\n    obj.form = $('#chat-input form');\r\n    obj.textarea = $('textarea', obj.form);\r\n\r\n    obj.emojilist = $('#emojilist');\r\n    obj.emojiSelectorClass = 'emojiSelector';\r\n\r\n    return obj;\r\n});","app.factory('Settings', function ($rootScope) {\r\n    var obj = {};\r\n\r\n    obj.get = function (key) {\r\n        var settings;\r\n\r\n        if (!angular.isObject(obj.settings)) {\r\n            try {\r\n                settings = JSON.parse(Cookies.get('settings'));\r\n            } catch (e) {\r\n            }\r\n\r\n            obj.settings = settings;\r\n        } else {\r\n            settings = obj.settings;\r\n        }\r\n\r\n        if (!angular.isObject(settings)) {\r\n            settings = {\r\n                'color': 0,\r\n                'scroll': true,\r\n                'formatting': true,\r\n                'sound': true\r\n            };\r\n        }\r\n\r\n        if (key === undefined) {\r\n            return settings;\r\n        }\r\n\r\n        return settings[key];\r\n    };\r\n\r\n    obj.set = function (key, value) {\r\n        var settings = obj.get();\r\n\r\n        if (settings === undefined) {\r\n            settings = {};\r\n        }\r\n\r\n        settings[key] = value;\r\n\r\n        if (!angular.isObject(settings)) {\r\n            throw 'Settings is not an object! Given: ' + settings;\r\n        }\r\n\r\n        obj.settings = settings;\r\n\r\n        Cookies.set('settings', JSON.stringify(settings));\r\n\r\n        console.log('Settings are now ', obj.settings);\r\n    };\r\n\r\n    obj.toggle = function (setting) {\r\n        if (obj.get(setting)) {\r\n            obj.set(setting, false);\r\n        } else {\r\n            obj.set(setting, true);\r\n        }\r\n    };\r\n\r\n    $rootScope.toggleSetting = function (setting) {\r\n        $(':focus').blur();\r\n\r\n        obj.toggle(setting);\r\n    };\r\n\r\n    $rootScope.selectSetting = function (setting, value) {\r\n        $(':focus').blur();\r\n\r\n        obj.set(setting, value);\r\n    };\r\n\r\n    return obj;\r\n});\r\n","app.factory('Styling', function ($rootScope, Settings) {\r\n    var obj = {};\r\n\r\n    /**\r\n     * Emojione config\r\n     * @type {boolean}\r\n     */\r\n    emojione.unicodeAlt = false;\r\n    emojione.ascii = true;\r\n\r\n    var emoji = {\r\n        'xD': ':laughing:',\r\n        ':D': ':smile:',\r\n        ':P': ':stuck_out_tongue_closed_eyes:',\r\n        ':)': ':relaxed:',\r\n        ';)': ':wink:',\r\n        ':(': ':frowning2:',\r\n        ':/': ':unamused:',\r\n        ':|': ':expressionless:',\r\n        ':O': ':astonished:',\r\n        ':X': ':kissing_closed_eyes:',\r\n        'B)': ':sunglasses:',\r\n        'o:)': ':innocent:',\r\n        '<3': ':heart:',\r\n        '</3': ':broken_heart:'\r\n    };\r\n\r\n    var replaceEmoji = {\r\n        'xD': ':laughing:',\r\n        ':D': ':smile:',\r\n        ':P': ':stuck_out_tongue_closed_eyes:',\r\n        ':/': ':unamused:',\r\n        ':|': ':expressionless:',\r\n        ':O': ':astonished:',\r\n        ':X': ':kissing_closed_eyes:',\r\n        'o:)': ':innocent:',\r\n        ':3': ':fox:'\r\n    };\r\n\r\n    var codes = {\r\n        '(^|\\\\s)(http[s]?://[^\\\\\\s]+)': '$1<a href=\"$2\" target=\"_blank\">$2</a>',\r\n        '\\\\[b\\\\](.*)\\\\[\\/b\\\\]': '<b>$1</b>',\r\n        '\\\\[i\\\\](.*)\\\\[\\/i\\\\]': '<em>$1</em>',\r\n        '\\\\[u\\\\](.*)\\\\[\\/u\\\\]': '<u>$1</u>',\r\n        '\\\\[s\\\\](.*)\\\\[\\/s\\\\]': '<s>$1</s>',\r\n        '\\\\[url=(.*)\\\\](.*)\\\\[\\/url\\\\]': '<a href=\"$1\" target=\"_blank\">$2</a>',\r\n        '\\\\[url\\\\](.*)\\\\[\\/url\\\\]': '<a href=\"$1\" target=\"_blank\">$1</a>',\r\n        '\\\\[img\\\\](.*)\\\\[\\/img\\\\]': '<a href=\"$1\" target=\"_blank\"><img src=\"$1\" class=\"embed-image\" alt=\"$1\" /></a>'\r\n    };\r\n\r\n\r\n    $rootScope.emojis = [];\r\n\r\n    $.each(emoji, function (emoji, shortname) {\r\n        $rootScope.emojis.push({\r\n            'code': emoji,\r\n            'img': parseEmoji(shortname)\r\n        });\r\n    });\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Methods\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Library methods\r\n     |\r\n     */\r\n\r\n    /**\r\n     * Adds styles to the input\r\n     *\r\n     * @param {string} input\r\n     * @returns {*}\r\n     */\r\n    obj.addStyles = function (input) {\r\n        input = parseEmoji(input);\r\n        input = parseCode(input);\r\n\r\n        return input;\r\n    };\r\n\r\n    /**\r\n     * Adds emojis to the input\r\n     *\r\n     * @param {string} input\r\n     * @returns {*}\r\n     */\r\n    function parseEmoji(input) {\r\n        function escape(input) {\r\n            return input.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\r\n        }\r\n\r\n        $.each(replaceEmoji, function (search, replace) {\r\n            var pattern = '(^| )(' + escape(search) + ')( |$)';\r\n\r\n            try {\r\n                input = input.replace(new RegExp('^(' + escape(search) + ')$', 'mg'), replace);\r\n                input = input.replace(new RegExp('(^| )(' + escape(search) + ')( |$)', 'mg'), ' ' + replace + ' ').trim();\r\n            } catch (e) {\r\n                console.log('Could not parse pattern ', pattern);\r\n            }\r\n        });\r\n\r\n        return emojione.shortnameToImage(input);\r\n    }\r\n\r\n    /**\r\n     * Parses BBCode to HTML\r\n     *\r\n     * @param {string} input\r\n     * @returns {*}\r\n     */\r\n    function parseCode(input) {\r\n        $.each(codes, function (code, html) {\r\n            input = input.replace(new RegExp(code, 'i'), html);\r\n        });\r\n\r\n        return input;\r\n    }\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | DOM helpers\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Various DOM helpers\r\n     |\r\n     */\r\n\r\n    $rootScope.currentColor = function () {\r\n        var color = Settings.get('color');\r\n\r\n        if (color >= 0) {\r\n            return 'color-' + color;\r\n        }\r\n    };\r\n\r\n    $rootScope.selectedColor = function (index) {\r\n        return index == Settings.get('color');\r\n    };\r\n\r\n    return obj;\r\n});","app.factory('TabHelper', function (Data) {\r\n    var obj = {};\r\n\r\n    var isActive = false;\r\n    var origInput = null;\r\n    var tabIndex = -1;\r\n    var tabPattern = null;\r\n    var tabRemnant = null;\r\n    var tabList = [];\r\n\r\n    function getPattern(input) {\r\n        var split = input.split(' ');\r\n\r\n        return split[split.length - 1];\r\n    }\r\n\r\n    function getRemnant(input, pattern) {\r\n        return input.substr(0, input.length - pattern.length);\r\n    }\r\n\r\n    obj.init = function(input) {\r\n        if (isActive) {\r\n            return;\r\n        }\r\n\r\n        origInput = input;\r\n        tabIndex = -1;\r\n\r\n        tabPattern = getPattern(input);\r\n\r\n        tabList = obj.userList();\r\n        tabRemnant = getRemnant(input, tabPattern);\r\n\r\n        obj.setActive(true);\r\n    };\r\n\r\n    obj.next = function() {\r\n        if (!isActive) {\r\n            return;\r\n        }\r\n\r\n        if (tabList.length == 0) {\r\n            return origInput;\r\n        }\r\n\r\n        tabIndex++;\r\n\r\n        if (tabIndex == tabList.length) {\r\n            tabIndex = 0;\r\n        }\r\n\r\n        return tabRemnant + tabList[tabIndex];\r\n    };\r\n\r\n    obj.setActive = function(active) {\r\n        isActive = active;\r\n    };\r\n\r\n    obj.tabList = function() {\r\n        return tabList;\r\n    };\r\n\r\n    obj.userList = function() {\r\n        var array = [];\r\n\r\n        if (tabPattern == null) {\r\n            return array;\r\n        }\r\n\r\n        var pattern = new RegExp('^' + tabPattern, 'i');\r\n\r\n        $.each(Data.userList(), function(i, user) {\r\n            if (tabPattern.length == 0 || pattern.test(user.name)) {\r\n                array.push(user.name);\r\n            }\r\n        });\r\n\r\n        return array;\r\n    };\r\n\r\n    return obj;\r\n});","app.controller('chatController', function ($scope, $rootScope, $sce, Ajax, Audio, Data, Selectors, Settings) {\r\n    var isUnloading = false; // Track the unload event\r\n    var isTitleBlinking = false; // Track title blinking\r\n\r\n    $scope.isEnabled = false;\r\n\r\n    $scope.error = {\r\n        'title': null,\r\n        'message': null\r\n    };\r\n\r\n    /**\r\n     * Storage for the original page title\r\n     *\r\n     * @type {string}\r\n     */\r\n    var pageTitle;\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | DOM methods\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Methods used in the DOM\r\n     |\r\n     */\r\n\r\n    $rootScope.enable = function () {\r\n        $scope.isEnabled = true;\r\n    };\r\n\r\n    $rootScope.disable = function () {\r\n        $scope.isEnabled = false;\r\n    };\r\n\r\n    $rootScope.reload = function () {\r\n        document.location.reload(true);\r\n    };\r\n\r\n    $rootScope.error = function (title, message) {\r\n        if (isUnloading) {\r\n            // Ignore errors on unload\r\n            return;\r\n        }\r\n\r\n        if ($scope.isEnabled) {\r\n            $rootScope.disable();\r\n\r\n            $scope.error.title = title;\r\n            $scope.error.message = $sce.trustAsHtml(message);\r\n        } else {\r\n            console.log('Error: ', message);\r\n        }\r\n    };\r\n\r\n    $rootScope.flashTitle = function () {\r\n        if (document.hasFocus() || isTitleBlinking) {\r\n            return;\r\n        }\r\n\r\n        var flash = true;\r\n        var flashTitle = '** ' + pageTitle + ' **';\r\n        var interval = null;\r\n\r\n        isTitleBlinking = true;\r\n\r\n        function changeTitle() {\r\n            document.title = flash ? pageTitle : flashTitle;\r\n            flash = !flash;\r\n        }\r\n\r\n        interval = setInterval(changeTitle, 1000);\r\n\r\n        $(window).focus(function () {\r\n            isTitleBlinking = false;\r\n            clearInterval(interval);\r\n            document.title = pageTitle;\r\n        });\r\n    };\r\n\r\n    $rootScope.deleteMessage = function (row) {\r\n        row.hidden = true; // Assume the row will be deleted\r\n        $('[data-id=\"'+ row.id + '\"]').detach();\r\n\r\n        Ajax.remove(row);\r\n    };\r\n\r\n    $scope.openChannel = function (channel) {\r\n        $(':focus').blur();\r\n\r\n        try {\r\n            if (Data.channelName() == channel.name) {\r\n                return;\r\n            }\r\n\r\n            Data.channel(channel);\r\n\r\n            Ajax.refresh();\r\n\r\n            $scope.$broadcast('focusInput');\r\n        } catch (e) {\r\n            console.log(e);\r\n\r\n            alert(e);\r\n        }\r\n    };\r\n\r\n    $scope.joinChannel = function () {\r\n        $(':focus').blur();\r\n\r\n        var channel = prompt('Enter channel name:', '#');\r\n\r\n        if (channel !== null && channel.length > 0) {\r\n            Ajax.send('/join ' + channel);\r\n        }\r\n    };\r\n\r\n    $scope.channels = function () {\r\n        return Data.channelList();\r\n    };\r\n\r\n    $scope.activeChannel = function () {\r\n        return Data.channelName();\r\n    };\r\n\r\n    $scope.channelTopic = function () {\r\n        return Data.topic();\r\n    };\r\n\r\n    $scope.rows = function () {\r\n        return Data.rowList();\r\n    };\r\n\r\n    $scope.users = function () {\r\n        return Data.userList();\r\n    };\r\n\r\n    $scope.displayFormatting = function () {\r\n        return Settings.get('formatting');\r\n    };\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Angular JS Events\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Angular event listeners\r\n     |\r\n     */\r\n\r\n    $scope.$on('enable', function (e) {\r\n        $rootScope.enable();\r\n    });\r\n\r\n    $scope.$on('disable', function (e) {\r\n        $rootScope.disable();\r\n    });\r\n\r\n    $scope.$on('error', function (e, title, message) {\r\n        $rootScope.error(title, message);\r\n    });\r\n\r\n    $scope.$on('reload', function (e) {\r\n        $rootScope.reload();\r\n    });\r\n\r\n    $scope.$on('loggedIn', function (e) {\r\n        $scope.isEnabled = true;\r\n\r\n        Selectors.fadeIn.fadeIn('slow', function () {\r\n            $scope.$broadcast('focusInput');\r\n        });\r\n\r\n        Selectors.overlay.fadeOut('slow');\r\n    });\r\n\r\n    $scope.$on('clearWindow', function (e) {\r\n        Data.clearRows();\r\n    });\r\n\r\n    $scope.$on('submit', function (e, message) {\r\n        Ajax.send(message);\r\n    });\r\n\r\n    $scope.$on('newMessages', function (e) {\r\n        $rootScope.flashTitle();\r\n\r\n        Audio.playDing();\r\n    });\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Watchers\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Angular watchers\r\n     |\r\n     */\r\n\r\n    $scope.$watch(function () {\r\n        var chatWindow = $(Selectors.chatWindowSelector);\r\n\r\n        if (chatWindow.length) {\r\n            return chatWindow.children().length;\r\n        }\r\n\r\n        return 0;\r\n    }, function (newCount, oldCount) {\r\n        var chatWindow = $(Selectors.chatWindowSelector);\r\n\r\n        if (newCount > 0 && newCount != oldCount) {\r\n            if (Settings.get('scroll')) {\r\n                var lastRow = $('div:last-child', chatWindow).last();\r\n\r\n                var scrollTop = chatWindow.scrollTop() + lastRow.offset().top + lastRow.outerHeight();\r\n\r\n                chatWindow.animate({\r\n                    scrollTop: scrollTop\r\n                });\r\n            }\r\n        }\r\n    });\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Init\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Initializes the application\r\n     |\r\n     */\r\n\r\n    $(document).ready(function () {\r\n        pageTitle = document.title;\r\n\r\n        Ajax.start();\r\n    });\r\n\r\n    $(window).unload(function () {\r\n        isUnloading = true;\r\n\r\n        Selectors.overlay.fadeIn();\r\n    });\r\n});","app.controller('inputController', function ($scope, $rootScope, Data, TabHelper, Selectors) {\r\n    /**\r\n     * String to append in beginning of all inputs\r\n     * @type {string}\r\n     */\r\n    var preFill = null;\r\n\r\n    /**\r\n     * Focuses the input\r\n     */\r\n    function focus() {\r\n        Selectors.textarea.focus();\r\n    }\r\n\r\n    /**\r\n     * Empties the input\r\n     */\r\n    function clearInput() {\r\n        Selectors.textarea.val(preFill);\r\n\r\n        focus();\r\n    }\r\n\r\n    /**\r\n     * Returns the input value\r\n     * @returns {string}\r\n     */\r\n    function getInput() {\r\n        return Selectors.textarea.val();\r\n    }\r\n\r\n    /**\r\n     * Sets the input value\r\n     * @param value\r\n     */\r\n    function setInput(value) {\r\n        Selectors.textarea.val(value);\r\n    }\r\n\r\n    /**\r\n     * Submits the form\r\n     */\r\n    function submit() {\r\n        $scope.$emit('submit', getInput());\r\n\r\n        clearInput();\r\n    }\r\n\r\n\r\n    $rootScope.addInput = function (input, withSpace) {\r\n        if (withSpace === undefined) {\r\n            withSpace = false;\r\n        }\r\n\r\n        var value = getInput() + (withSpace ? ' ' + input : input);\r\n\r\n        setInput(value.trim());\r\n\r\n        focus();\r\n    };\r\n\r\n    $rootScope.addCode = function (code) {\r\n        var url;\r\n\r\n        function hasUrl(url) {\r\n            if (url === undefined || url == null) {\r\n                return false;\r\n            }\r\n\r\n            return url.length > 0;\r\n        }\r\n\r\n        function needsUrl(code) {\r\n            return code === 'url' || code === 'img';\r\n        }\r\n\r\n        var textarea = Selectors.textarea[0];\r\n\r\n        var value = getInput();\r\n        var selectionStart = textarea.selectionStart;\r\n        var selectionEnd = textarea.selectionEnd;\r\n\r\n        var selectedText = value.substring(selectionStart, selectionEnd);\r\n        var beforeText = value.substring(0, selectionStart);\r\n        var afterText = value.substring(selectionEnd, value.length);\r\n\r\n        if (code === 'url' || code === 'img' && selectedText.length == 0) {\r\n            url = prompt('Where do you want to link to?');\r\n        }\r\n\r\n        if (needsUrl(code)) {\r\n            if (hasUrl(url)) {\r\n                if (code === 'url') {\r\n                    value = beforeText + '[' + code + '=' + url + ']' + (selectedText.length > 0 ? selectedText : url) + '[/' + code + ']' + afterText;\r\n                } else if (code == 'img') {\r\n                    value = beforeText + '[' + code + ']' + (selectedText.length > 0 ? selectedText : url) + '[/' + code + ']' + afterText;\r\n                }\r\n            }\r\n        } else {\r\n            value = beforeText + '[' + code + ']' + selectedText + '[/' + code + ']' + afterText;\r\n        }\r\n\r\n        setInput(value);\r\n\r\n        var unbindWatch = $scope.$watch('input', function (input) {\r\n            focus();\r\n\r\n            var caretStart = input.length;\r\n            var caretStop = caretStart;\r\n\r\n            if (code === 'url' && hasUrl(url)) {\r\n                if (selectedText.length === 0) {\r\n                    caretStart = selectionStart + 6 + url.length;\r\n                    caretStop = caretStart + url.length;\r\n                }\r\n            }\r\n            if (code === 'img' && hasUrl(url)) {\r\n                caretStart = selectionEnd + selectedText.length + url.length + 5 + (code.length * 2);\r\n                caretStop = caretStart;\r\n            } else {\r\n                if (selectedText.length > 0) {\r\n                    caretStart = selectionStart + selectedText.length + 5 + (code.length * 2);\r\n                } else {\r\n                    caretStart = selectionStart + 2 + code.length;\r\n                }\r\n\r\n                caretStop = caretStart;\r\n            }\r\n\r\n            textarea.setSelectionRange(caretStart, caretStop);\r\n\r\n            unbindWatch();\r\n        });\r\n\r\n    };\r\n\r\n    $rootScope.whisperTo = function (username) {\r\n        clearInput();\r\n\r\n        $rootScope.addInput('/whisper ' + username + ' ');\r\n    };\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Angular Events\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | Angular JS events\r\n     |\r\n     */\r\n\r\n    $scope.$on('clearInput', function () {\r\n        clearInput();\r\n    });\r\n\r\n    $scope.$on('focusInput', function () {\r\n        focus();\r\n    });\r\n\r\n    $scope.$on('sent', function() {\r\n        focus();\r\n    });\r\n\r\n    $scope.$on('setInputLength', function(event, maxLength) {\r\n        Selectors.textarea.attr('maxlength', maxLength);\r\n    });\r\n\r\n    /*\r\n     |--------------------------------------------------------------------------\r\n     | Events\r\n     |--------------------------------------------------------------------------\r\n     |\r\n     | jQuery event listeners\r\n     |\r\n     */\r\n\r\n    Selectors.textarea.keypress(function (e) {\r\n        // Enter\r\n        if (e.which == 13 && !e.shiftKey || e.keyCode == 13 && !e.shiftKey) {\r\n            e.preventDefault();\r\n\r\n            var input = getInput();\r\n\r\n            if (input.length == 0) {\r\n                return;\r\n            }\r\n\r\n            if (input == '/clear') {\r\n                $rootScope.$broadcast('clearWindow');\r\n\r\n                clearInput();\r\n\r\n                return;\r\n            }\r\n\r\n            var persistCommand = new RegExp('^\\/(persist|p) ([0-9a-z_-]+)$', 'i');\r\n            var whisperCommand = new RegExp('^\\/(whisper|w|msg) ([0-9a-z_-]+)', 'i');\r\n\r\n            if (persistCommand.test(input)) {\r\n                var nick = input.split(' ')[1];\r\n\r\n                preFill = '/whisper ' + nick + ' ';\r\n\r\n                clearInput();\r\n\r\n                return;\r\n            } else if (whisperCommand.test(input) == false) {\r\n                preFill = null;\r\n            }\r\n\r\n            submit();\r\n            return;\r\n        }\r\n\r\n        // Tab\r\n        if (e.which == 9 || e.keyCode == 9) {\r\n            e.preventDefault();\r\n\r\n            TabHelper.init(getInput());\r\n\r\n            setInput(TabHelper.next());\r\n        } else {\r\n            TabHelper.setActive(false);\r\n        }\r\n    });\r\n\r\n    Selectors.form.submit(function (e) {\r\n        e.preventDefault();\r\n\r\n        submit();\r\n    });\r\n\r\n});","app.controller('menuController', function ($scope, Data, Selectors, Settings) {\r\n    $scope.hasNotifications = function () {\r\n        return Data.notifications() > 0;\r\n    };\r\n\r\n    $scope.notificationCount = function() {\r\n        return Data.notifications();\r\n    };\r\n\r\n    $scope.formattingIcon = function () {\r\n        return 'glyphicon-heart' + (Settings.get('formatting') ? '' : '-empty');\r\n    };\r\n\r\n    $scope.soundIcon = function () {\r\n        return 'glyphicon-volume-' + (Settings.get('sound') ? 'up' : 'off');\r\n    };\r\n\r\n    $scope.scrollIcon = function () {\r\n        return 'glyphicon-' + (Settings.get('scroll') ? 'pause' : 'play');\r\n    };\r\n\r\n    $scope.showCommands = function() {\r\n        Selectors.commands.modal();\r\n    };\r\n});","app.controller('messageController', function($rootScope, $scope, Data, Styling) {\r\n    function hasHighlight(row) {\r\n        var config = Data.config();\r\n\r\n        if (row.isOwnMessage) {\r\n            return false;\r\n        }\r\n\r\n        if (config.settings.highlight === undefined) {\r\n            return false;\r\n        }\r\n\r\n        var highlights = 0;\r\n\r\n        $.each(config.settings.highlight, function (key, value) {\r\n            if (row.message.indexOf(value.trim()) >= 0) {\r\n                highlights++;\r\n            }\r\n        });\r\n\r\n        return highlights > 0;\r\n    }\r\n\r\n    $scope.addClasses = function (row) {\r\n        var classes = '';\r\n\r\n        if (row.hidden !== undefined) {\r\n            classes += ' hidden';\r\n        }\r\n\r\n        if (row.whisperDirection !== undefined) {\r\n            classes += ' ' + row.whisperDirection;\r\n        }\r\n\r\n        if (row.type == 'post' && hasHighlight(row)) {\r\n            classes += ' highlight';\r\n        }\r\n\r\n        return classes.trim();\r\n    };\r\n\r\n    $scope.dropdown = function (row) {\r\n        return row.type == 'post' || row.type == 'whisper' || row.type == 'emote';\r\n    };\r\n\r\n    $scope.colon = function (row) {\r\n        return row.type == 'post' || row.type == 'whisper';\r\n    };\r\n\r\n    $scope.name = function (row) {\r\n        return row.type == 'whisper' && row.whisperDirection == 'from' ? row.receiver : row.name;\r\n    };\r\n\r\n    $scope.color = function (row) {\r\n        if (row.color !== undefined && row.color > 0) {\r\n            return 'color-' + row.color;\r\n        }\r\n    };\r\n\r\n    $scope.stylize = function(row) {\r\n        if (row.type == 'post' || row.type == 'whisper' || row.type == 'emote') {\r\n            return Styling.addStyles(row.message);\r\n        }\r\n\r\n        return row.message;\r\n    };\r\n});","app.controller('soundController', function ($scope, $rootScope) {\r\n    // TODO: add sounds\r\n});"],"sourceRoot":"/source/"}